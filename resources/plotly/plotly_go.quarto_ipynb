{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Plotly Graph Objects\"\n",
        "---\n",
        "\n",
        "\n",
        "## Motivation\n",
        "\n",
        "Using `plotly.express` is generally easy and straightforward, but is limited\n",
        "to a large set of useful but standard visualizations. These might not be the\n",
        "best we can do for our data and story. `plotly` provides much more **granular**\n",
        "control over the visualizations via the `plotly.graph_objects` module. This\n",
        "module is very close to being a translation of the underlying _JavaScript_\n",
        "library that is running this show, and allows you to control almost all aspects\n",
        "of your visualization, along with adding multiple numerous interactive features.\n",
        "\n",
        "::: {.callout-tip}\n",
        "### Why use `plotly.graph_objects`?\n",
        "If you want graphs that are more customized, or that need more control\n",
        "structures for interactivity, you switch to `plotly.graph_objects`. There is no\n",
        "incompatibility between `plotly.express` and `plotly.graph_objects`, since the\n",
        "end product of `plotly.express` is a `plotly.graph_objects.Figure` object.\n",
        "\n",
        "\n",
        " For example, sliders, maps, and drop-down menus are easy individually with\n",
        " `plotly.express`, however *combining* them on the same visualization is non-trivial and needs `plotly.graph_objects`\n",
        " is\n",
        " non-trivial.\n",
        ":::\n",
        "\n",
        " [![](img/2023-03-12-14-44-39.png){width=600}](img/2023-03-12-14-44-39.png)\n",
        "\n",
        "::: {.callout-warning}\n",
        "Working on recreating this plot. Link below doesn't work\n",
        ":::\n",
        "\n",
        "* ~~[Click here for interactive version of the map example](https://jfh.georgetown.domains/motivating-example.html)~~\n",
        "\n",
        "## Structure of a graph object\n",
        "\n",
        "* Plotly figures (`plotly.graph_object.Figure` objects) are represented as hierarchical trees, with `graph_object` being the root note, and child-nodes called `attributes`.\n",
        "* Graph_objects have three top-level attributes: `data`, `layout`, and `frames` (frames are only needed for animated plots)\n",
        "  * Notice the connection of these attributes to pure `JavaScript`.\n",
        "* **Data:** This is a list of dictionaries referred to as \"traces\"\n",
        "  - The `trace` represents a set of related graphical marks in a figure.\n",
        "  - Each trace must have a `type` attribute which defines the other allowable attributes.\n",
        "  - Each trace has one of more than 40 possible types (see below for a list organized by subplot type, including e.g. [`scatter`](https://plotly.com/python/line-and-scatter/), [`bar`](https://plotly.com/python/bar-charts/), [`pie`](https://plotly.com/python/pie-charts/), [`surface`](https://plotly.com/python/3d-surface-plots/), [`choropleth`](https://plotly.com/python/choropleth-maps/) etc)\n",
        "* **Layout**: Controls various structural and stylistic components (e.g. title, font, size, etc)\n",
        "\n",
        "::: {.aside}\n",
        "Sources: [figure structure](https://plotly.com/python/figure-structure/) [Graph objects](https://plotly.com/python/graph-objects/)\n",
        ":::\n",
        "\n",
        "::: {.callout-info}\n",
        "This structure of the `plotly.graph_objects.Figure` are directly parallel to the\n",
        "structure of the `plotly.js` figure Objects\n",
        "  - The data object is a list of JSON objects, each of which defines a single\n",
        "  trace\n",
        "  - The layout object is a JSON object that defines the overall layout of the figure.\n",
        ":::\n",
        "\n",
        "## Graph_object Structure summary\n",
        "\n",
        "![](img/2023-03-12-17-03-01.png)\n",
        "\n",
        "## Various available traces\n",
        "\n",
        "* **2D Cartesian trace types, and Subplots**.\n",
        "    [![](img/2023-03-12-15-34-01.png){width=720}](img/2023-03-12-15-34-01.png)\n",
        "* **Geo-spatial trace Types**.\n",
        "    [![](img/2023-03-12-15-34-35.png){width=720}](img/2023-03-12-15-34-35.png)\n",
        "\n",
        "<sup>For more [click here](https://plotly.com/python/figure-structure/)!<sup>\n",
        "\n",
        "\n",
        "## Looking under the hood\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=\"50%\"}\n",
        "* Viewing the underlying data structure for any plotly.graph_objects.Figure object can be done via `print(fig)` or  `fig.show(\"json\")`.\n",
        "* Figures also support `fig.to_dict()` and `fig.to_json()` methods.\n",
        ":::\n",
        "::: {.column width=\"50%\"}\n",
        "![](img/2023-03-10-12-08-27.png){width=400}\n",
        ":::\n",
        "::::\n"
      ],
      "id": "cfdcf267"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.io as pio\n",
        "pio.renderers.default = \"browser\""
      ],
      "id": "39af04e4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px"
      ],
      "id": "3cf3447d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig = px.line(x=[\"a\", \"b\", \"c\"], y=[1, 3, 2], title=\"sample figure\")\n",
        "print(fig)\n",
        "# fig.show()"
      ],
      "id": "c15a03cf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Graph_objects: Hello world\n",
        "\n",
        "* When using graph objects (without animation), you typically do the following\n",
        "  * `(1)` Initialize the figure\n",
        "  * `(2)` Add one or more traces\n",
        "  * `(3)` customize the layout\n"
      ],
      "id": "dd2a1ddd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.graph_objects as go\n",
        "\n",
        "# DATAFRAME\n",
        "df = px.data.gapminder()\n",
        "\n",
        "# INITIALIZE GRAPH OBJECT\n",
        "fig = go.Figure()\n",
        "\n",
        "# ADD TRACES FOR THE DATA-FRAME\n",
        "fig.add_trace(  # Add A trace to the figure\n",
        "    go.Scatter(  # Specify the type of the trace\n",
        "        x=df[\"gdpPercap\"],  # Data-x\n",
        "        y=df[\"lifeExp\"],  # Data-y\n",
        "        mode=\"markers\",\n",
        "        # note the re-normalization of population to map to width to units of \"pixels\"\n",
        "        marker=dict(\n",
        "            size=50 * (df[\"pop\"] / max(df[\"pop\"])) ** 0.5,\n",
        "            color=df[\"pop\"],\n",
        "            showscale=True,\n",
        "            colorscale=\"Viridis\",\n",
        "            symbol=\"circle\",\n",
        "        ),\n",
        "        opacity=1.0,\n",
        "    )\n",
        ")\n",
        "\n",
        "# SET THEME, AXIS LABELS, AND LOG SCALE\n",
        "fig.update_layout(\n",
        "    template=\"plotly_white\",\n",
        "    xaxis_title=\"National GDP (per capita)\",\n",
        "    yaxis_title=\"Life expectancy (years)\",\n",
        "    title=\"Country comparison: color & size = population\",\n",
        "    height=400,\n",
        "    width=800,\n",
        ")\n",
        "fig.update_xaxes(type=\"log\")\n",
        "\n",
        "fig.show()"
      ],
      "id": "725174ca",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Basic charts with graph_objects\n",
        "\n",
        "![](img/2023-03-12-15-27-15.png){width=650}\n",
        "<!-- [![](img/2023-03-12-15-27-15.png){width=600}](img/2023-03-12-15-27-15.png) -->\n",
        "\n",
        "<!-- <sup> [Source](https://images.plot.ly/plotly-documentation/images/python_cheat_sheet.pdf) <sup>  -->\n",
        "\n",
        "## Additional charts with Graph objects\n",
        "\n",
        "![](img/2023-03-12-15-27-51.png){width=775}\n",
        "<!-- [![](img/2023-03-12-15-27-51.png){width=600}](img/2023-03-12-15-27-51.png) -->\n",
        "\n",
        "<!-- <sup> [Source](https://images.plot.ly/plotly-documentation/images/python_cheat_sheet.pdf) <sup>  -->\n",
        "\n",
        "## Subplots\n",
        "\n",
        "[**A coding note:** Notice that there are semi-colons (`;`) at the end of most\n",
        "lines of code. This prevents the figure from printing out output of that line of\n",
        "code or that function, especially within a\n",
        "Quarto document. This is useful for **not** printing out intermediate steps and\n",
        "lets only the final figure be printed.]{.aside}\n",
        "\n",
        "With `plotly.graph_objects` we can finally combine figures in a subplot! [source](https://plotly.com/python/subplots/)\n"
      ],
      "id": "bd3f5d62"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from plotly.subplots import make_subplots\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "fig = make_subplots(rows=1, cols=2); # <1>\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=[1, 2, 3], y=[4, 5, 6]),\n",
        "    row=1, col=1 # <2>\n",
        ");\n",
        "\n",
        "fig.add_trace(\n",
        "    go.Scatter(x=[20, 30, 40], y=[50, 60, 70]),\n",
        "       row=1, col=2\n",
        ");\n",
        "\n",
        "fig.update_layout(height=500, width=700, title_text=\"Side By Side Subplots\");\n",
        "fig.show()"
      ],
      "id": "71eb0d47",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "1. Specifying the arrangement of subplots\n",
        "2. Specifying the position of the first graph in the pre-specified subplot\n",
        "   arrangement\n",
        "\n",
        "## Multiple Subplots\n",
        "\n",
        "Here we show a 2 x 2 subplot grid with each subplot populated with a single scatter trace.\n"
      ],
      "id": "d9189b65"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.graph_objects as go\n",
        "from plotly.subplots import make_subplots\n",
        "\n",
        "fig = make_subplots(rows=2, cols=2, start_cell=\"bottom-left\");\n",
        "\n",
        "fig.add_trace(\n",
        "  go.Scatter(x=[1, 2, 3], y=[4, 5, 6], name = \"Plot 1\"),\n",
        "  row=1, col=1\n",
        ");\n",
        "\n",
        "fig.add_trace(\n",
        "  go.Scatter(x=[20, 30, 40], y=[50, 60, 70], name = \"Plot 2\"),\n",
        "  row=1, col=2,\n",
        ");\n",
        "\n",
        "fig.add_trace(\n",
        "  go.Scatter(x=[300, 400, 500], y=[600, 700, 800], name = \"Plot 3\"),\n",
        "  row=2, col=1\n",
        ");\n",
        "\n",
        "fig.add_trace(\n",
        "  go.Scatter(x=[4000, 5000, 6000], y=[7000, 8000, 9000], name = \"Plot 4\"),\n",
        "              row=2, col=2,\n",
        ");\n",
        "fig.show()"
      ],
      "id": "6b8c2ebd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Demonstration of more capabilities\n",
        "\n",
        "### Import\n"
      ],
      "id": "8184bf77"
    },
    {
      "cell_type": "code",
      "metadata": {
        "cache": false
      },
      "source": [
        "import plotly.graph_objects as go\n",
        "import plotly.express as px\n",
        "import plotly.io as pio"
      ],
      "id": "84cffefa",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Data\n",
        "\n",
        "* We can generate a graph similar to the motivating example, using the gap-minder dataset.\n",
        "* Let's briefly explore this.\n"
      ],
      "id": "09a060d4"
    },
    {
      "cell_type": "code",
      "metadata": {
        "cache": false
      },
      "source": [
        "# DATAFRAME\n",
        "df = px.data.gapminder()\n",
        "df = df.drop(['iso_num'], axis=1)   # DROP COLUMN\n",
        "print(\"Shape =\", df.shape)\n",
        "print(df)"
      ],
      "id": "4df88a59",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Choropleth\n",
        "\n",
        "* We will cover `Choropleths` in more detail during the `Geo-spatial module`. However, for now, all you need to know is that a choropleth is a type of map that uses colors or shading to represent different values or levels of a particular data variable across a geographic area, such as a country, state, or city.\n",
        "\n",
        "* The choropleth map divides the area into regions or polygons, usually based on administrative boundaries, and then assigns a color or shade to each region based on the value of the data variable being represented. For example, if the data variable is population density, then regions with higher population density would be shaded darker than regions with lower population density.\n",
        "\n",
        "* Plotly can internally create the map using location tags for countries, such as `USA`.\n"
      ],
      "id": "2c140ee2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# ISOLATE ONE YEAR OF DATA FOR PLOTTING\n",
        "df = df.query(\"year==2007\")\n",
        "\n",
        "# INITIALIZE GRAPH OBJECT\n",
        "fig = go.Figure();\n",
        "\n",
        "# ADD A CHOROPLETH TRACES FOR THE DATA-FRAME\n",
        "fig.add_trace(  # Add a trace to the figure\n",
        "    go.Choropleth(  # Specify the type of the trace\n",
        "        uid=\"full-set\",  # uid=unique id (Assign an ID to the trace)\n",
        "        locations=df[\"iso_alpha\"],  # Supply location information tag for mapping\n",
        "        z=df[\"lifeExp\"],  # Data to be color-coded on graph\n",
        "        colorbar_title=\"Life expectancy\",  # Title for color-bar\n",
        "        visible=True,  # <1> Specify whether or not to make data-visible when rendered\n",
        "    )\n",
        ");\n",
        "\n",
        "# SHOW\n",
        "fig.show()"
      ],
      "id": "4c3a112b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "1. The final input argument `visible` may seem silly, obviously we want to see the data! However, this becomes quite important when you want to *conditionally* update different traces.\n",
        "\n",
        "### Drop-down menus\n",
        "\n",
        "* `Dropdown menus` are very important for interactivity, since they let the user jump between data-sets, graph-types, or plotting styles.\n",
        "* Drop-down menus are controlled in `plotly graph objects` using four methods, which tell `plotly.js` how to modify the chart.\n",
        "  - `restyle`:  modify data or data attributes\n",
        "  - `relayout`: modify layout attributes\n",
        "  - `update`: modify data **and** layout attributes\n",
        "  - `animate`: start or pause an [animation](https://plotly.com/python/#animations)\n",
        "\n",
        "* For more see: [https://plotly.com/python/dropdowns/](https://plotly.com/python/dropdowns/)\n",
        "\n",
        "#### Dropdown syntax\n",
        "\n",
        "In Plotly, adding drop-down menus typically follows the following code-format.\n",
        "\n",
        "```python\n",
        "# ADD DROPDOWNS\n",
        "fig.update_layout(\n",
        "    updatemenus=[\n",
        "        # BUTTON-1\n",
        "        dict(\n",
        "            # BUTTON-1 OPTIONS\n",
        "            buttons=list([\n",
        "                dict(\n",
        "                    ),\n",
        "                dict(\n",
        "                    ),\n",
        "                        ]),\n",
        "            # BUTTON-1 META-DATA\n",
        "            direction=\"left\",\n",
        "            ),\n",
        "\n",
        "        # BUTTON-2\n",
        "        dict(\n",
        "            # BUTTON-2 OPTIONS\n",
        "            buttons=list([\n",
        "                dict(\n",
        "                    ),\n",
        "                dict(\n",
        "                    )\n",
        "                        ]),\n",
        "            # BUTTON-2 META-DATA\n",
        "            direction=\"down\",\n",
        "            ),\n",
        "    ]\n",
        ")\n",
        "```\n",
        "\n",
        "#### Example 1\n",
        "\n",
        "* Changing something that doesn't require switching the data being plotted is relatively straight-forward (e.g. the type of plot or color)\n",
        "* Make sure to take note of the various comments which high-light relevant information!\n"
      ],
      "id": "b3548a77"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# INITIALIZE GRAPH OBJECT\n",
        "fig = go.Figure();\n",
        "\n",
        "# ADD TRACES FOR THE DATA-FRAME\n",
        "fig.add_trace(  # Add A trace to the figure\n",
        "    go.Scatter(  # Specify the type of the trace\n",
        "        x=df[\"gdpPercap\"],  # Data-x\n",
        "        y=df[\"lifeExp\"],  # Data-y\n",
        "        mode=\"markers\",\n",
        "        # note the re-normalization of population to map to width to units of \"pixels\"\n",
        "        marker=dict(\n",
        "            size=50 * (df[\"pop\"] / max(df[\"pop\"])) ** 0.5,\n",
        "            color=df[\"pop\"],\n",
        "            showscale=True,\n",
        "            colorscale=\"Viridis\",\n",
        "            symbol=\"circle\",\n",
        "        ),\n",
        "        opacity=1.0,\n",
        "        visible=True,  # Specify whether or not to make data-visible when rendered\n",
        "    )\n",
        ");\n",
        "\n",
        "# SET THEME, AXIS LABELS, AND LOG SCALE\n",
        "fig.update_layout(\n",
        "    template=\"plotly_white\",\n",
        "    xaxis_title=\"National GDP (per capita)\",\n",
        "    yaxis_title=\"Life expectancy (years)\",\n",
        "    title=\"Country comparison: color & size = population\"\n",
        ");\n",
        "fig.update_xaxes(type=\"log\");\n",
        "\n",
        "\n",
        "# VARIABLES FOR BUTTON LOCATION\n",
        "# (SET THESE BY TRIAL AND ERROR)\n",
        "button_height = 0.15\n",
        "x1_loc = 0.65\n",
        "y1_loc = 1.2\n",
        "x2_loc = x1_loc\n",
        "y2_loc = y1_loc + 2 * button_height\n",
        "x3_loc = x1_loc\n",
        "y3_loc = y1_loc + 4 * button_height\n",
        "\n",
        "# DROPDOWN MENUS\n",
        "fig.update_layout(\n",
        "    # DEFINE A LIST OF THE VARIOUS BUTTONS (STORED AS DICTIONARIES)\n",
        "    updatemenus=[\n",
        "        # BUTTON-1: OPACITY\n",
        "        dict(\n",
        "            # NOTICE THAT THE OPTION ARE A LIST OF DICTIONARIES\n",
        "            # IMPORTANT: args specifies the key-value pairing for what to change\n",
        "            buttons=[\n",
        "                dict(\n",
        "                    label=\"1.00\",               # LABEL SHOWN TO USER\n",
        "                    method=\"restyle\",           # MODIFICATION TYPE (SEE ABOVE)\n",
        "                    args=[\"opacity\", 1.00],     # KEY-VALUE FOR WHAT TO CHANGE AND HOW\n",
        "                ),\n",
        "                dict(\n",
        "                    label=\"0.75\",\n",
        "                    method=\"restyle\",\n",
        "                    args=[\"opacity\", 0.75],\n",
        "                ),\n",
        "                dict(\n",
        "                    label=\"0.50\",\n",
        "                    method=\"restyle\",\n",
        "                    args=[\"opacity\", 0.5],\n",
        "                ),\n",
        "                dict(\n",
        "                    label=\"0.25\",\n",
        "                    method=\"restyle\",\n",
        "                    args=[\"opacity\", 0.25],\n",
        "                ),\n",
        "            ],\n",
        "            # PLACEMENT AND META DATA FOR THE BUTTON\n",
        "            direction=\"right\",\n",
        "            showactive=True,  # HIGHLIGHTS ACTIVE DROPDOWN ITEM OR ACTIVE BUTTON IF TRUE\n",
        "            pad={\"r\": 10, \"t\": 10},  # PADDING\n",
        "            x=x1_loc,  # POSITION\n",
        "            y=y1_loc,\n",
        "            xanchor=\"left\",  # ANCHOR POINT\n",
        "            yanchor=\"top\",\n",
        "        ),\n",
        "        # BUTTON-2: COLOR SCALE\n",
        "        dict(\n",
        "            buttons=list(\n",
        "                [\n",
        "                    dict(\n",
        "                        args=[\"marker.colorscale\", \"Viridis\"],\n",
        "                        label=\"Viridis\",\n",
        "                        method=\"restyle\",\n",
        "                    ),\n",
        "                    dict(\n",
        "                        args=[\"marker.colorscale\", \"Cividis\"],\n",
        "                        label=\"Cividis\",\n",
        "                        method=\"restyle\",\n",
        "                    ),\n",
        "                    # dict(\n",
        "                    #     args=[\"marker.colorscale\", \"Blues\"],\n",
        "                    #     label=\"Blues\",\n",
        "                    #     method=\"restyle\",\n",
        "                    # ),\n",
        "                    dict(\n",
        "                        args=[\"marker.colorscale\", \"Greens\"],\n",
        "                        label=\"Greens\",\n",
        "                        method=\"restyle\",\n",
        "                    ),\n",
        "                ]\n",
        "            ),\n",
        "            # PLACEMENT AND META DATA FOR THE BUTTON\n",
        "            direction=\"right\",\n",
        "            showactive=True,  # HIGHLIGHTS ACTIVE DROPDOWN ITEM OR ACTIVE BUTTON IF TRUE\n",
        "            pad={\"r\": 10, \"t\": 10},  # PADDING\n",
        "            x=x2_loc,  # POSITION\n",
        "            y=y2_loc,\n",
        "            xanchor=\"left\",  # ANCHOR POINT\n",
        "            yanchor=\"top\",\n",
        "        ),\n",
        "        # BUTTON-3: MARKER SYMBOL\n",
        "        dict(\n",
        "            # NOTICE THAT THE OPTION ARE A LIST OF DICTIONARIES\n",
        "            # args specifices the key-value pairing for what to change\n",
        "            buttons=list(\n",
        "                [\n",
        "                    dict(\n",
        "                        label=\"Circle\",\n",
        "                        method=\"restyle\",    # changing style\n",
        "                        args=[\"marker.symbol\", \"circle\"],\n",
        "                    ),\n",
        "                    dict(\n",
        "                        label=\"Square\",\n",
        "                        method=\"restyle\",\n",
        "                        args=[\"marker.symbol\", \"square\"],\n",
        "                    ),\n",
        "                    dict(\n",
        "                        label=\"Diamond\",\n",
        "                        method=\"restyle\",\n",
        "                        args=[\"marker.symbol\", \"diamond\"],\n",
        "                    ),\n",
        "                ]\n",
        "            ),\n",
        "            # PLACEMENT AND META DATA FOR THE BUTTONS\n",
        "            direction=\"right\",\n",
        "            showactive=True,  # HIGHLIGHTS ACTIVE DROPDOWN ITEM OR ACTIVE BUTTON IF TRUE\n",
        "            pad={\"r\": 10, \"t\": 10},  # PADDING\n",
        "            x=x3_loc,  # POSITION\n",
        "            y=y3_loc,\n",
        "            xanchor=\"left\",  # ANCHOR POINT\n",
        "            yanchor=\"top\",\n",
        "        ),\n",
        "    ]\n",
        ");\n",
        "\n",
        "# ADD ANNOTATION TO LABEL BUTTONS\n",
        "fig.update_layout(\n",
        "    annotations=[\n",
        "        dict(\n",
        "            text=\"Opacity\",\n",
        "            x=x1_loc+0.08,\n",
        "            xref=\"paper\",\n",
        "            y=y1_loc + 0.06,\n",
        "            yref=\"paper\",\n",
        "            showarrow=False,\n",
        "        ),\n",
        "        dict(\n",
        "            text=\"Color scale\",\n",
        "            x=x2_loc+ 0.11 ,\n",
        "            xref=\"paper\",\n",
        "            y=y2_loc + 0.06,\n",
        "            yref=\"paper\",\n",
        "            showarrow=False,\n",
        "        ),\n",
        "        dict(\n",
        "            text=\"Shape\",\n",
        "            x=x3_loc + 0.07,\n",
        "            xref=\"paper\",\n",
        "            y=y3_loc + 0.06,\n",
        "            yref=\"paper\",\n",
        "            showarrow=False,\n",
        "        ),\n",
        "    ]\n",
        ");\n",
        "\n",
        "fig.show()"
      ],
      "id": "136e3429",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Example 2:\n",
        "\n",
        "You can control which data is shown by controlling which traces are visible. This is done with a list of boolean values for the visibility of each trace `[False, True]` (see below).\n",
        "\n",
        "The \"update\" method should be used when modifying the data and layout sections of the graph.\n",
        "\n",
        "This example demonstrates how to update which traces are displayed.\n"
      ],
      "id": "d1aaea02"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# INITIALIZE GRAPH OBJECT\n",
        "fig = go.Figure()\n",
        "\n",
        "# TRACE-1: gdpPercap vs lifeExp (area=pop)\n",
        "fig.add_trace(  # Add A trace to the figure\n",
        "    go.Scatter(  # Specify the type of the trace\n",
        "        x=df[\"gdpPercap\"],  # Data-x\n",
        "        y=df[\"lifeExp\"],  # Data-y\n",
        "        mode=\"markers\",\n",
        "        # note the re-normalization of population to map to width to units of \"pixels\"\n",
        "        marker=dict(\n",
        "            color=df[\"lifeExp\"],\n",
        "            showscale=True,\n",
        "            colorscale=\"Viridis\",\n",
        "            symbol=\"circle\",\n",
        "        ),\n",
        "        opacity=1.0,\n",
        "        visible=True,  # Specify whether or not to make data-visible when rendered\n",
        "    )\n",
        ");\n",
        "\n",
        "# TRACE-2: gdpPercap vs pop\n",
        "fig.add_trace(  # Add A trace to the figure\n",
        "    go.Scatter(  # Specify the type of the trace\n",
        "        x=df[\"gdpPercap\"],  # Data-x\n",
        "        y=df[\"pop\"],  # Data-y\n",
        "        mode=\"markers\",\n",
        "        # note the re-normalization of population to map to width to units of \"pixels\"\n",
        "        marker=dict(\n",
        "            color=df[\"pop\"],\n",
        "            showscale=True,\n",
        "            colorscale=\"Viridis\",\n",
        "            symbol=\"circle\",\n",
        "        ),\n",
        "        opacity=1.0,\n",
        "        visible=False,  # Specify whether or not to make data-visible when rendered\n",
        "    )\n",
        ");\n",
        "\n",
        "# SET THEME, AXIS LABELS, AND LOG SCALE\n",
        "fig.update_layout(\n",
        "    template=\"plotly_white\",\n",
        "    xaxis_title=\"National GDP (per capita)\",\n",
        "    title=\"Life expectancy (years)\",\n",
        ");\n",
        "fig.update_xaxes(type=\"log\");\n",
        "\n",
        "\n",
        "# VARIABLES FOR BUTTON LOCATION\n",
        "# (SET THESE BY TRIAL AND ERROR)\n",
        "button_height = 0.15\n",
        "x1_loc = 0.00\n",
        "y1_loc = 1.15\n",
        "\n",
        "# DROPDOWN MENUS\n",
        "fig.update_layout(\n",
        "    # DEFINE A LIST OF THE VARIOUS BUTTONS (STORED AS DICTIONARIES)\n",
        "    updatemenus=[\n",
        "        # BUTTON-1: OPACITY\n",
        "        dict(\n",
        "            # NOTICE THAT THE OPTION ARE A LIST OF DICTIONARIES\n",
        "            # IMPORTANT: args specifies the key-value pairing for what to change\n",
        "            buttons=[\n",
        "                dict(\n",
        "                    label=\"Life expectancy\",            # LABEL SHOWN TO USER\n",
        "                    method=\"update\",                    # MODIFICATION TYPE (SEE ABOVE)\n",
        "                     args=[{\"visible\": [True, False]},  # BOOLEAN VALUES FOR EACH TRACE\n",
        "                           {\"title\": \"Life expectancy (years)\"}]\n",
        "                     ),\n",
        "                dict(\n",
        "                    label=\"Population\",               # LABEL SHOWN TO USER\n",
        "                    method=\"update\",           # MODIFICATION TYPE (SEE ABOVE)\n",
        "                     args=[{\"visible\": [False, True]},\n",
        "                           {\"title\": \"Population\"}]\n",
        "                     ),\n",
        "            ],\n",
        "            # PLACEMENT AND META DATA FOR THE BUTTON\n",
        "            direction=\"down\",\n",
        "            showactive=True,  # HIGHLIGHTS ACTIVE DROPDOWN ITEM OR ACTIVE BUTTON IF TRUE\n",
        "            pad={\"r\": 10, \"t\": 10},  # PADDING\n",
        "            x=x1_loc,  # POSITION\n",
        "            y=y1_loc,\n",
        "            xanchor=\"left\",  # ANCHOR POINT\n",
        "            yanchor=\"top\",\n",
        "        )\n",
        "    ]\n",
        ");\n",
        "\n",
        "\n",
        "fig.show()"
      ],
      "id": "7ebc731b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Sliders\n",
        "\n",
        "#### Example 1\n",
        "\n",
        "Sliders can be used in Plotly to change the data displayed (using multiple traces) or style of a plot.\n"
      ],
      "id": "11abffe8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#source: https://plotly.com/python/sliders/\n",
        "import plotly.graph_objects as go\n",
        "import numpy as np\n",
        "\n",
        "# initialize figure\n",
        "fig = go.Figure();\n",
        "\n",
        "# Add traces, one for each slider step\n",
        "for step in np.arange(0, 5, 0.1):\n",
        "    fig.add_trace(\n",
        "        go.Scatter(\n",
        "            visible=False,\n",
        "            line=dict(color=\"#00CED1\", width=6),\n",
        "            name=\"𝜈 = \" + str(step),\n",
        "            x=np.arange(0, 10, 0.01),\n",
        "            y=np.sin(step * np.arange(0, 10, 0.01))));\n",
        "\n",
        "# Make 10th trace visible\n",
        "fig.data[10].visible = True\n",
        "\n",
        "# Create and add slider\n",
        "steps = []\n",
        "for i in range(len(fig.data)):\n",
        "    step = dict(\n",
        "        method=\"update\",\n",
        "        args=[{\"visible\": [False] * len(fig.data)},\n",
        "              {\"title\": \"Slider switched to step: \" + str(i)}],  # layout attribute\n",
        "    )\n",
        "    step[\"args\"][0][\"visible\"][i] = True  # Toggle i'th trace to \"visible\"\n",
        "    steps.append(step)\n",
        "\n",
        "sliders = [dict(\n",
        "    active=10,\n",
        "    currentvalue={\"prefix\": \"Frequency: \"},\n",
        "    pad={\"t\": 50},\n",
        "    steps=steps\n",
        ")]\n",
        "\n",
        "fig.update_layout(\n",
        "    sliders=sliders\n",
        ");\n",
        "\n",
        "fig.update_layout(template=\"plotly_white\");\n",
        "\n",
        "\n",
        "fig.show()"
      ],
      "id": "e2d8c778",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Example 2\n",
        "\n",
        "Not surprisingly, sliders are trivial with Plotly express.\n"
      ],
      "id": "a5db0fce"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "\n",
        "df = px.data.gapminder()\n",
        "fig = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\",\n",
        "                 animation_frame=\"year\", animation_group=\"country\", # <1>\n",
        "                 size=\"pop\", color=\"continent\", hover_name=\"country\",\n",
        "                 log_x=True, size_max=55, range_x=[100,100000], range_y=[25,90]);\n",
        "\n",
        "# SET THEME\n",
        "fig.update_layout(template=\"plotly_white\");\n",
        "\n",
        "fig[\"layout\"].pop(\"updatemenus\");  # optional, drop animation buttons\n",
        "fig.show()"
      ],
      "id": "14a518d8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "1. These two arguments make the slider and animation work.\n",
        "\n",
        "You may remember this graph from the video we showed earlier in the semester ... pretty neat!\n",
        "\n",
        "[Hans Rosling's 200 Countries, 200 Years, 4 Minutes](https://youtu.be/jbkSRLYSojo)\n",
        "\n",
        "## Resources\n",
        "\n",
        "* The documentation on the Plotly website is very good: [https://plotly.com/python/](https://plotly.com/python/)\n",
        "* This provides a massive collection of examples, for both `plotly.express` and `plotly.graph_objects`, which can get you started on almost any task.\n",
        "\n",
        "![](img/2023-03-12-15-10-34.png){width=750}"
      ],
      "id": "7c8c25a2"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/abhijit/Library/Python/3.9/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}